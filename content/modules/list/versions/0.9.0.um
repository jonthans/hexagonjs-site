@version 0.9.0

  @description
    A list collection that wraps standard JavaScript Arrays. Best reserved for cases where you are doing a lot of array mutation. In most cases a normal JavaScript Array should suffice.

  @examples
    @codeblock js
      @inline 0.9.0/example.js

  @api List

    @prototype hx.List
      @description
        A wrapper around standard JavaScript Arrays, with methods for adding and removing items.

      @constructor
        @param? array [Array]: An array containing the values to initialise the list with

      @property size [Number]: The current size of the list

      @method add
        @description
          Adds an object to the list. Returns this List for chaining.
        @param item [Any]: The item to add.
        @returns List: This list for chaining

      @method clear
        @description
          Removes all items from the list, resulting in an empty list with size 0. Returns this List for chaining.
        @returns List: This list for chaining

      @method delete
        @description
          Removes an entry from the list by position. Returns true if an item was removed, false otherwise.
        @param index [Number]: The index to remove.
        @returns Boolean

      @method entries
        @description
          Returns the items in the list as an array.
        @returns Array

      @method forEach
        @description
          Calls the function supplied for each item in the list. Returns this list for chaining.
        @param f [Function]: The function that should be called for each item.
          @param value [Any]: The value being considered from the list.
        @param? thisArg [Object]: A parameter which lets you supply the 'this' context to be used when calling f. The default is to use this List.

      @method get
        @description: Gets an item by position.
        @param index [Number]: A 0 based index which should be between 0 and list.size (exclusive). If the index is out of this range, then undefined will be returned.
        @returns Any

      @method has
        @description
          Checks if the list contains a value. Returns true if the value is in the list, false otherwise.
        @param value [Any]: The value to look for in the list.
        @returns Boolean: True if the value is in the list

      @method remove
        @description
          Removes the first occurrence of a value from the list. Returns true if a value was removed, false otherwise.
        @param value [Any]: The value to remove from the list.
        @returns Boolean: True if the value was removed

      @method removeAll
        @description
          Removes all occurrences of a value from the list. Returns the number of items removed.
        @param value [Any]: The value to remove from the list.
        @returns Number

      @method values
        @description
          Returns the items in the list as an array - does the same as entries().
        @returns Array

  @seeAlso
    @hyperlink(../map)[Map]
    @hyperlink(../set)[Set]
