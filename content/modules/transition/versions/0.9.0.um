@version 0.9.0

  @description
    Utility functions for calling functions on a schedule.

  @examples
    @codeblock js
      // linear easing function
      hx.ease.linear(0) // returns 0
      hx.ease.linear(0.5) // returns 0.5
      hx.ease.linear(1) // returns 1

      // quadratic easing function
      hx.ease.quad(0) // returns 0
      hx.ease.quad(0.5) // returns 0.25
      hx.ease.quad(1) // returns 1

      // cubic easing function
      hx.ease.cubic(0) // returns 0
      hx.ease.cubic(0.5) // returns 0.125
      hx.ease.cubic(1) // returns 1

      hx.loop(function() {
        // will call this function every frame until true is returned
      })


      // start a transition that should run over the next 1 second
      // the callback will be called with the progress every frame
      hx.transition(1000, function(progress) {
        // progress will be a value between 0 and 1
      })


  @api Transition
    @function hx.loop
      @description
        Calls a function every frame until it returns true. This will attempt to use @code[requestAnimationFrame], falling back to @code[setTimeout] if @code[requestAnimationFrame] is unavailable.
      @param callback [Function]
        @description: Return true to end the loop
        @returns Boolean

    @function hx.transition
      @description
        Calls a function every frame for an amount of time, providing the progress to the callback. This will attempt to use @code[requestAnimationFrame], falling back to @code[setTimeout] if @code[requestAnimationFrame] is unavailable.
      @param millis [Number]: The transition's duration in milliseconds
      @param callback [Function]
        @description: The function that gets called each frame
        @param? cancelled [Boolean]: If the transition has been cancelled and this is the final call, then cancelled will be true, otherwise it will be false.
        @param progress [Number]
      @param? ease [Function]
        @description
          The easing function to use. You can use one of the predefined functions on hx.ease, or you can define your own.
        @param input [Number]: A value between 0 and 1
        @default: hx.ease.linear
        @returns Number: A value between 0 and 1
      @param? endCallback [Function]
        @param cancelled [Boolean]: Will be true if the transition was cancelled using the returned cancel function, otherwise will be true
      @returns Function
        @description
          A function that can be called to cancel the transition.

          @codeblock
            var stop = hx.transition(1000, cb)

            // to stop/cancel the transition, the stop function can be called:
            stop()

    @object ease
      @description
        A collection of easing functions that map from domain [0, 1] to range [0, 1]

      @function linear
        @description
          The linear easing function is defined as

          @codeblock
            function(x) {
              return x;
            }

        @param input [Number]: A value between 0 and 1
        @returns Number: A value between 0 and 1

      @function quad
        @description
          The quadratic easing function is defined as

          @codeblock
            function(x) {
              return x*x;
            }

        @param input [Number]: A value between 0 and 1
        @returns Number: A value between 0 and 1

      @function cubic
        @description
          The cubic easing function is defined as

          @codeblock
            function(x) {
              return x*x*x;
            }

        @param input [Number]: A value between 0 and 1
        @returns Number: A value between 0 and 1


  @seeAlso
    @hyperlink(../animate)[Animate]
    @hyperlink(../morph)[Morph]
